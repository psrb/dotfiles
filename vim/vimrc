" vim: sw=2 ts=2 sts=2 et fmr={{{,}}} fdm=marker
scriptencoding utf-8

" Configurable through the constant g:installType#isCompleteInstall in
" vim/autoload/installType.vim.
" The constant controls which plugins are installed, either all plugins or a
" smaller subset which are not necessary on some machines (e.g. servers).

" Plug setup {{{
  call plug#begin('~/.vim/plugged')
  Plug 'chriskempson/base16-vim'

  " Fuzzy file finding
  Plug 'ctrlpvim/ctrlp.vim'

  " autoclosing of brackets, quotes, etc.
  Plug 'Raimondi/delimitMate'

  " make surroundings repeatable
  Plug 'tpope/vim-repeat'
  " motions for surrounding text objects with brackets, quotes, etc.
  Plug 'tpope/vim-surround'

  " commands for toggling of comments
  Plug 'tomtom/tcomment_vim'

  " git plugin
  Plug 'tpope/vim-fugitive'

  " Better netrw handling
  Plug 'tpope/vim-vinegar'

  " sane buffer closing
  Plug 'vim-scripts/bufkill.vim'

  Plug 'tmux-plugins/vim-tmux'

  Plug 'vimjas/vim-python-pep8-indent'

  " Replace existing text with contents of a register with gr \o/
  Plug 'vim-scripts/ReplaceWithRegister'

  " Live preview of complex regex searches/substitutes
  Plug 'markonm/traces.vim'

  if g:installType#isCompleteInstall == 1
    " auto completion through LSP

    function! InstallCoCPlugins(info)
      if a:info.status ==# 'installed' || a:info.force
        execute 'CocInstall coc-json coc-tsserver coc-pyright coc-go'
      endif
    endfunction

    Plug 'neoclide/coc.nvim', {
          \ 'branch': 'release',
          \ 'do': function('InstallCoCPlugins')
          \ }

    " syntax checking
    Plug 'dense-analysis/ale'  " requires Vim 8

    " external deps: ctags
    Plug 'majutsushi/tagbar'

    " markdown editing. external deps: pandoc
    Plug 'vim-pandoc/vim-pandoc'
    Plug 'vim-pandoc/vim-pandoc-syntax'
    Plug 'godlygeek/tabular'

    " Display git changes in the sign column
    Plug 'airblade/vim-gitgutter'

    " Plugin for searching in files (using ack or ag)
    Plug 'mileszs/ack.vim'

    Plug 'leafgarland/typescript-vim'
    Plug 'posva/vim-vue'
  endif
  call plug#end()
" }}}

" General {{{

  let g:mapleader=' '
  let g:maplocalleader='\'

  " disable the visual/error bells
  set noerrorbells
  " and enable visual bell, but clear the visual bell character
  set visualbell t_vb =

  " Escape Codes {{{
    if !has('gui_running')
      " support of italic font style through escape codes in terminal
      " http://stackoverflow.com/a/30937851
      let &t_ZH="\e[3m"
      let &t_ZR="\e[23m"

      " undercurl
      let &t_Cs="\e[4m"
      let &t_Ce="\e[24m"

      " Set tab title in iTerm
      if $TERM_PROGRAM ==# 'iTerm.app'
        let &t_ts="\e]1;"
        let &t_fs="\007" " Bell
      endif
    end
  " }}}

  " folding
  set foldenable
  set foldlevelstart=99
  set foldmethod=syntax

  " persistent undo
  set undofile
  set undodir=$HOME/.vimundo

  " Enable mouse in all modes
  set mouse=a
" }}}

" UI {{{
  set title " Display the current file and path as the title
  set showcmd " show incomplete command in status bar

  set splitright " new vertical splits always to the right
  set splitbelow " new horizontal splits always below

  " better command line completion
  set wildmenu
  set wildmode=list:longest,full

  " Faster macro (and others) execution. Don't redraw on every macro execution
  set lazyredraw

  " Status Line {{{

    set laststatus=2 "always show the status line

    " left side of status line
    set statusline=
    set statusline+=%f " filename
    set statusline+=%(::%{StatusLineCurrentTag()}%)
    set statusline+=%(\ [%M%R%W]%) " modified,readonly,preview flag
    set statusline+=%(\ %{&paste?'[PASTE]':''}%)
    " separation point between left/right aligned items
    set statusline+=%=
    " right side of status line
    set statusline+=%(%{StatusLineLintingStatus()}\ %)
    set statusline+=%(%{StatusLineFileInfo()}\ %)
    set statusline+=%3l/%-3L  " line numbers
    set statusline+=\ %3c\  " column number

  " }}}
" }}}

" Editor {{{
  syntax on
  if has('termguicolors')
    set termguicolors
  endif
  set background=dark
  colorscheme base16-ocean

  set relativenumber " display line numbers relative to cursor
  set number         " with above: show actual line number for cursor line
  set colorcolumn=+1 " highlight one column after text width
  set cursorline     " highlight the line of the cursor

  " show tabs, trailing spaces, non-breaking spaces and line wraps
  set list
  set listchars=tab:›\ ,trail:•,precedes:…,extends:…,nbsp:.

  " Text format options. ':help fo-table' for detailed information
  " Text can be formatted with 'gq{motion}'.
  set formatoptions=tcroqnj
  " Formatting options lists. Vims default only formats ordered lists.
  " This adds unordered list beginning with *,-,+.
  set formatlistpat=^\\s*\\(\\d\\+[\\]:.)}\\t\ ]\\\|[*\\-\\+]\ \\)\\s*

  " Use system clipboard
  set clipboard+=unnamed

  " Number of lines to keep above/below the cursor
  set scrolloff=5

  if has('gui_running')
    if has('macunix')
        set guifont=Menlo:h15
    endif

    if has('gui_macvim')
      " Make without automatic jump, open quickfix if error present.
      an 40.360 &Tools.&Make<Tab>:make :make!<CR>:cw<CR>
    endif

    set guioptions-=T " disable tab bar
    set guioptions-=m " disable menu
    set guioptions-=r " disable right scroll bar
    set guioptions-=R " disable right scroll bar
    set guioptions-=l " disable left scroll bar
    set guioptions-=L " disable left scroll bar
  endif
" }}}

" File Handling {{{
  set autoread
  set nobackup
  set noswapfile
" }}}

" Indentation {{{
  set tabstop=4       " a tab is 4 spaces long
  set expandtab       " use spaces instead of tabs
  set shiftwidth=0    " use tabstop value
  set softtabstop=-1  " use shiftwidth value
  set shiftround      " shift to multiple of shiftwidth, ie 6 to 8
  set backspace=indent,eol,start
  set autoindent
" }}}

" Search {{{
  set hlsearch
  set incsearch
  set ignorecase
  set smartcase
" }}}

" Functions {{{

  " Display the syntax highlight groups for word under cursor
  function! SynStack()
    if !exists('*synstack')
      return
    endif
    echo map(synstack(line('.'), col('.')), "synIDattr(v:val, 'name')")
  endfunc

 " Switch between dark and light color schemes
  function! s:toggleLightColorScheme()
    if &background ==? 'light'
      set background=dark
      colorscheme base16-ocean
    else
      set background=light
      colorscheme base16-solarized-light
    endif
  endfunc
  command! ToggleLightColorScheme :call s:toggleLightColorScheme()

" }}}

" Key mappings {{{

  " better movement between windows
  nnoremap <C-h> <C-w>h
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-l> <C-w>l

  " resize active window to 60% of the window width
  nnoremap <silent> <Leader>r :exe "vertical resize " .
        \ string(round(&columns * 0.60))<CR>

  " make j/k useful for long lines
  nnoremap j gj
  nnoremap k gk

  " center cursor on forward/backwards jumps
  nnoremap <C-b> <C-b>zz
  nnoremap <C-f> <C-f>zz

  " making saving easier
  nnoremap <silent> <Leader>w :<C-u>update<cr>

  " 'sudo save'
  cnoremap w!! w !sudo tee % >/dev/null

  " Newlines above/below current line without leaving normal mode
  nnoremap <silent> zk O<Esc>j
  nnoremap <silent> zj o<Esc>k

  " Keep selection when (re-)indenting
  vnoremap < <gv
  vnoremap > >gv
  vnoremap = =gv

  " centering searches (auto opens folds)
  nnoremap * *zzzv
  nnoremap # #zzzv
  nnoremap n nzzzv
  nnoremap N Nzzzv

  " reload vimrc
  nnoremap <F2> :source $MYVIMRC<cr>:echom "vimrc reloaded"<cr>

  " Change to file directory
  nnoremap <leader>cd :cd %:p:h<cr>

" }}}

" Plugins {{{

  " DelimitMate {{{
    " exclude `
    let g:delimitMate_quotes = "\" '"
    " put closing bracket on seperate line after enter
    let g:delimitMate_expand_cr = 1
  " }}}

  " Bufkill {{{
    nnoremap <silent> <Leader>bd :BD<CR>
  " }}}

  " CTRLP {{{
    " Include current file in search results. Otherwise I wonder where that
    " file went...
    let g:ctrlp_match_current_file = 1

    " Use ag if available
    if executable('ag')
      " Always use cwd as CtrlPs working directory
      let g:ctrlp_working_path_mode = 0
      let g:ctrlp_user_command = 'ag %s -l --nocolor --nogroup --hidden
                  \ --ignore .git -g ""'
    endif
  " }}}

  if g:installType#isCompleteInstall == 1
    " CoC {{{
      set updatetime=300
      set signcolumn=yes

      inoremap <silent><expr> <TAB>
            \ coc#pum#visible() ? coc#pum#next(1) :
            \ CheckBackspace() ? "\<Tab>" :
            \ coc#refresh()
      inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

      function! CheckBackspace() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
      endfunction

      " Use <c-space> to trigger completion
      if has('nvim')
        inoremap <silent><expr> <c-space> coc#refresh()
      else
        inoremap <silent><expr> <c-@> coc#refresh()
      endif

      " GoTo code navigation
      nmap <silent> gd <Plug>(coc-definition)
      nmap <silent> gy <Plug>(coc-type-definition)
      nmap <silent> gi <Plug>(coc-implementation)
      nmap <silent> gt <Plug>(coc-references)

      " Use K to show documentation in preview window
      nnoremap <silent> K :call ShowDocumentation()<CR>

      function! ShowDocumentation()
        if CocAction('hasProvider', 'hover')
          call CocActionAsync('doHover')
        else
          call feedkeys('K', 'in')
        endif
      endfunction

      " Highlight the symbol and its references when holding the cursor
      autocmd CursorHold * silent call CocActionAsync('highlight')
    " }}}

    " Tagbar {{{
      map <silent> <Leader>t :TagbarToggle<cr>
    " }}}

    " Ale {{{
      let g:ale_echo_msg_format = '%severity%: %s - [%linter%%: code%]'
      let g:ale_linters = { 'python': ['pylint', 'mypy', 'pycodestyle'] }
      let g:ale_fixers = { 'python': ['black'], 'go': ['gofmt'] }
      let g:ale_fix_on_save = 1
      nnoremap <Leader>ln :ALENextWrap<CR>
      nnoremap <Leader>lp :ALEPreviousWrap<CR>
    " }}}

    " Pandoc {{{
      let g:pandoc#syntax#conceal#use=0
      let g:pandoc#folding#fdc=0
      let g:pandoc#spell#enabled=0
      let g:pandoc#modules#disabled = ['chdir']
    " }}}

    " Ack {{{
      command! Todos :Ack! \(FIXME\|TODO\)
      if executable('ag')
        let g:ackprg = 'ag --vimgrep'
      endif
    " }}}
  endif
" }}}
